"""
Django settings for digital_campus project.

Generated by 'django-admin startproject' using Django 5.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os

from dotenv import load_dotenv
load_dotenv()


import sys
sys.dont_write_bytecode = True

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-=byy&=^v^3&mea)0dv6i!&bwl)(yh*pms28odk*^5o8$@oc^nx"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True ## CHANGE IN PRODUCTION

ALLOWED_HOSTS = ['localhost', '127.0.0.1']

# Application definition

INSTALLED_APPS = [
    # Django core (should come first)
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.humanize',

    # Third-party apps
    "widget_tweaks",
    "taggit",
    'crispy_forms',
    'crispy_bootstrap4',
    'storages',
    'tinymce',
    'dal',
    'dal_select2',
    'corsheaders',
    'rest_framework',
    'channels',

    # Local apps (alphabetical order)
    'digital_campus',
    'apps.common.apps.CommonConfig',
    'apps.chat',
    'apps.clubs',
    'apps.events',
    'apps.posts',
    'apps.search',
    'apps.connections',
    'apps.notifications',
    'apps.users.apps.UsersConfig',  # Note: Removed duplicate entry
]

TINYMCE_DEFAULT_CONFIG = {
    "height": "400px",
    "width": "100%",
    "cleanup_on_startup": True,
    "custom_undo_redo_levels": 20,
    "selector": "textarea",
    "plugins": """
        textcolor save link image media preview codesample contextmenu
        table code lists fullscreen insertdatetime nonbreaking
        searchreplace wordcount visualblocks visualchars code
        fullscreen autolink lists charmap print hr anchor pagebreak
        """,
    "toolbar1": """
        fullscreen preview bold italic underline | fontselect
        fontsizeselect | forecolor backcolor | alignleft alignright
        aligncenter alignjustify | indent outdent | bullist numlist
        table | link image media | codesample
        """,
    "contextmenu": "formats | link image",
    "menubar": True,
    "statusbar": True,
}


MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "corsheaders.middleware.CorsMiddleware"
]


ROOT_URLCONF = "digital_campus.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "apps/common/templates"],  # Updated template directory
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "apps.common.context_processors.featured_events",
                'apps.common.context_processors.notifications',

            ],
        },
    },
]

ASGI_APPLICATION = 'digital_campus.asgi.application'
WSGI_APPLICATION = "digital_campus.wsgi.application"

CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {'hosts': [('127.0.0.1', 6379)]},
    },
}


# Database
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}


# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
LANGUAGE_CODE = "en-us"
TIME_ZONE = "UTC"
USE_I18N = True
USE_TZ = True

AWS_STATIC_BUCKET = os.getenv("AWS_STATIC_BUCKET", "digitalcampus-files")
AWS_MEDIA_BUCKET  = os.getenv("AWS_MEDIA_BUCKET",  "digitalcampus-files")

STORAGES = {
    "default": {
        "BACKEND": "storages.backends.s3.S3Storage",
        "OPTIONS": {
            # your media bucket
            "bucket_name": AWS_MEDIA_BUCKET,
            "location": "media", 
            # turn off public ACL by default
            "default_acl": None,
            # region & custom domain only if you need them:
            "region_name": "us-east-2",
            "endpoint_url": None,          # e.g. for DO Spaces or R2
            "addressing_style": "virtual", # or "path"
            "custom_domain": None,         # if you have a CloudFront/CNAME
        },
    },
    "staticfiles": {
        "BACKEND": "storages.backends.s3.S3StaticStorage",
        "OPTIONS": {
            # your static files bucket
            "bucket_name": AWS_STATIC_BUCKET,
            # "default_acl": "public-read",  # static assets are usually public
            "default_acl": None,
            "region_name": "us-east-2",
            "addressing_style": "virtual",
            # if you front with CloudFront and want signed URLs:
            # "cloudfront_key_id": os.environ.get("AWS_CF_KEY_ID"),
            # "cloudfront_key": os.environ.get("AWS_CF_KEY"),
        },
    },
}

# Static and Media files (all served from S3 bucket via storages)

STATIC_URL             = "/static/"
MEDIA_URL              = "media/"

# local dev fallback dirs (collected but not served)
STATIC_ROOT            = BASE_DIR / 'staticfiles'
STATICFILES_DIRS       = [BASE_DIR / 'apps/common/static']


# REST Framework and JWT Configuration
REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny',
    ],
}

# CORS Headers Configuration
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
]

CORS_ALLOW_ALL_ORIGINS = True

CRISPY_TEMPLATE_PACK = "bootstrap4"

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

LOGIN_REDIRECT_URL = '/'
LOGIN_URL = 'login'

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = os.environ.get('EMAIL_USER')
EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_PASS')

AWS_ACCESS_KEY_ID = os.environ.get('AWS_ACCESS_KEY')
AWS_SECRET_ACCESS_KEY = os.environ.get('AWS_SECRET_ACCESS_KEY')


AWS_DEFAULT_ACL = None
AWS_S3_OBJECT_ACL = None   

AWS_S3_OBJECT_PARAMETERS = {
    'CacheControl': 'max-age=86400',
}

LOGGING = {
  'version': 1,
  'disable_existing_loggers': False,
  'handlers': {
    'null': {'class': 'logging.NullHandler'},
  },
  'loggers': {
    'botocore': {
      'handlers': ['null'],
      'level': 'WARNING',
      'propagate': False,
    },
    'boto3': {
      'handlers': ['null'],
      'level': 'WARNING',
      'propagate': False,
    },
  },
}
